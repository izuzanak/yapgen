#vim: set syntax=rules:

init_code: {}

terminals:
  string {'\''.|'|*.'\''}
  integer {('-'+e).('0'+(<19>.d*))}
  float {('-'+e).('0'+(<19>.d*)).(('.'.d*)+e).(([eE].([+-]+e).d.d*)+e)}

  id {('_'+l).('_'+l+d)*}

  equal {"="+"=="}
  exclamation_equal {"!="+"<>"}
  rs_br {'>'}
  ls_br {'<'}
  rs_br_equal {">="}
  ls_br_equal {"<="}
  match {"match"+"MATCH"+"like"+"LIKE"}

  and {"&&"+"and"+"AND"}
  or {"||"+"or"+"OR"}
  not {"!"+"not"+"NOT"}

  lr_br {'('}
  rr_br {')'}

  _SKIP_ {w.w*}
  _SKIP__ {"--".!'\n'*.'\n'}
  _END_ {[\0;]}

nonterminals:
  <start>

  <D>
  <C>
  <B>
  <A>

rules:
  <start> -> <D> _END_ ->> {}

  $ -- exp operators --
  <D> -> <D> and <C> ->> {print("logical and")}
  <D> -> <D> or <C> ->> {print("logical or")}
  <D> -> <C> ->> {}

  <C> -> not <C> ->> {print("logical not")}
  <C> -> <B> ->> {}

  <B> -> <A> equal <A> ->> {print("operator =")}
  <B> -> <A> exclamation_equal <A> ->> {print("operator !=")}
  <B> -> <A> rs_br <A> ->> {print("operator >")}
  <B> -> <A> ls_br <A> ->> {print("operator <")}
  <B> -> <A> rs_br_equal <A> ->> {print("operator >=")}
  <B> -> <A> ls_br_equal <A> ->> {print("operator <=")}
  <B> -> <A> match <A> ->> {print("operator match")}

  <B> -> lr_br <D> rr_br ->> {}

  <A> -> string ->> {print("string: "..rule_body(0))}
  <A> -> integer ->> {print("integer: "..rule_body(0))}
  <A> -> float ->> {print("float: "..rule_body(0))}

  <A> -> id ->> {print("id: "..rule_body(0))}

