#vim: set syntax=rules:

init_code:
{
}

terminals:
   single_char_const {'\''.!'\0'.'\''}
   octal_char_const {'\''.'\\'.<07>.(<07>+e).(<07>+e).'\''}
   hex_char_const {'\''.'\\'.'x'.(<09>+<af>+<AF>).(<09>+<af>+<AF>+e).'\''}
   backslash_char_const {'\''.'\\'.[abfnrtv\\?\'"].'\''}

   oct_int_const {'0'.<07>*}
   dec_int_const {<19>.d*}
   hex_int_const {'0'.[xX].(<09>+<af>+<AF>).(<09>+<af>+<AF>)*}

   float_const {(d*.((d.'.')+('.'.d)).d*)+((d*.((d.'.')+('.'.d)+d).d*).[eE].([+-]+e).d.d*)}

   $string_const {'"'.(|\\\"\n|+(('\\'.<07>.(<07>+e).(<07>+e))+('\\'.'x'.(<09>+<af>+<AF>).(<09>+<af>+<AF>+e))+('\\'.[abfnrtv\\?\'"])))*.'"'}
   $string_const {('"'.(|\\\"\n|+(('\\'.<07>.(<07>+e).(<07>+e))+('\\'.'x'.(<09>+<af>+<AF>).(<09>+<af>+<AF>+e))+('\\'.[abfnrtv\\?\'"])))*.'"'.w*)*}
   string_const {'"'.(|\\\"|+(('\\'.<07>.(<07>+e).(<07>+e))+('\\'.'x'.(<09>+<af>+<AF>).(<09>+<af>+<AF>+e))+('\\'.[abfnrtv\\?\'"])))*.'"'}

   id {('_'+l).('_'+l+d)*}

   import {"import"}

   class {"class"}
   extends {"extends"}

   public {"public"}
   private {"private"}
   static {"static"}
   abstract {"abstract"}
   final {"final"}
   parallel {"parallel"}

   new {"new"}
   free {"free"}
   this {"this"}
   type {"type"}

   at {'@'}
   equal_at {"=@"}
   sequence {"<-"}

   lr_br {'('}
   rr_br {')'}

   lc_br {'{'}
   rc_br {'\}'}

   le_br {'['}
   re_br {']'}

   comma {','}
   semicolon {';'}

   if {"if"}
   else {"else"}
   do {"do"}
   while {"while"}
   for {"for"}

   switch {"switch"}
   case {"case"}
   default {"default"}

   break {"break"}
   continue {"continue"}
   return {"return"}

   try {"try"}
   catch {"catch"}

   equal {'='}
   plus_equal {"+="}
   minus_equal {"-="}
   asterisk_equal {"*="}
   slash_equal {"/="}
   percent_equal {"%="}
   double_ls_br_equal {"<<="}
   double_rs_br_equal {">>="}
   ampersand_equal {"&="}
   pipe_equal {"|="}
   circumflex_equal {"^="}
   double_ampersand {"&&"}
   double_pipe {"||"}
   ampersand {'&'}
   pipe {'|'}
   circumflex {'^'}
   double_equal {"=="}
   exclamation_equal {"!="}
   rs_br {'>'}
   ls_br {'<'}
   rs_br_equal {">="}
   ls_br_equal {"<="}
   double_rs_br {">>"}
   double_ls_br {"<<"}
   plus {'+'}
   minus {'-'}
   dot {'.'}
   asterisk {'*'}
   slash {'/'}
   percent {'%'}
   double_plus {"++"}
   double_minus {"--"}
   exclamation {'!'}

   question {'?'}
   colon {':'}
   tilde {'~'}

   _SKIP_ {w.w*}
   _SKIP__ {'#'.!'\n'*.'\n'}
   _SKIP___ {"//".!'\n'*.'\n'}
   _SKIP____ {"/*".(!'*'+('*'.!'/'))*."*/"}
   _END_ {'\0'}

nonterminals:
   <start>
   <end_check>
   <program>

   <import_list>
   <import>

   <def_modifier>

   <top_class_list>
   <top_class>

   <class_def>
   <class_name>
   <class_extends>
   <class_parts>
   <class_part_modifiers>
   <class_part>

   <class_element>
   <class_element_expression>
   <class_element_name>

   <method_def>
   <method_name>
   <method_parameters>
   <method_parameter_list>
   <method_parameter>
   <method_body>
   <method_body_begin>

   <command_list>
   <command>

   <command_block>
   <command_block_begin>

   <try_catch_block>
   <try_begin>
   <catch_begin>

   <if_else>
   <while_begin>
   <do_while_begin>

   <for_expression>
   <for_identifier>
   <for_begin>

   <switch_expression>
   <switch_item_list>
   <switch_item>
   <switch_item_begin>
   <case_exp_list>

   <condition>
   <expression>

   <exp>

   <parameters>
   <parameters_begin>
   <parameter_list>

   <object_class_name>

   <object_member>

   <array_elements>
   <array_elements_begin>
   <array_element_list>

   <item_range>
   <slice_range>
   <exp_colon_exp_colon>
   <exp_colon>

   <H>
   <G>
   <F>
   <E>
   <D>
   <C>
   <B>
   <A>

rules:
   <start> -> <end_check> ->> {}

   <end_check> -> <program> _END_ ->> {}
   <end_check> -> _END_ ->> {}

   <program> -> <import_list> ->> {}

   $ -- import list --
   <import_list> -> <import> <import_list> ->> {}
   <import_list> -> <top_class_list> ->> {}

   <import> -> import id semicolon ->> {}

   $ -- modifiers definition --
   <def_modifier> -> public ->> {}
   <def_modifier> -> private ->> {}
   <def_modifier> -> static ->> {}
   <def_modifier> -> abstract ->> {}
   <def_modifier> -> final ->> {}
   <def_modifier> -> parallel ->> {}

   $ -- top class list --
   <top_class_list> -> <top_class> <top_class_list> ->> {}
   <top_class_list> -> <top_class> ->> {}

   $ -- top class definition --
   <top_class> -> <def_modifier> <top_class> ->> {}
   <top_class> -> <class_def> ->> {}

   $ -- class definition --
   <class_def> -> <class_name> <class_extends> <class_parts> ->> {}

   <class_name> -> class id ->> {}

   <class_extends> -> extends id lc_br ->> {}
   <class_extends> -> lc_br ->> {}

   <class_parts> -> <class_part_modifiers> <class_parts> ->> {}
   <class_parts> -> rc_br ->> {}

   <class_part_modifiers> -> <def_modifier> <class_part_modifiers> ->> {}
   <class_part_modifiers> -> <class_part> ->> {}

   <class_part> -> <class_element> ->> {}
   <class_part> -> <class_def> ->> {}
   <class_part> -> <method_def> ->> {}
   
   <class_element> -> id semicolon ->> {}
   <class_element> -> <class_element_expression> semicolon ->> {}
   <class_element_expression> -> <class_element_name> equal <exp> ->> {}

   <class_element_name> -> id ->> {}

   $ -- method definition --
   <method_def> -> <method_name> <method_parameters> <method_body> ->> {}
   <method_name> -> id lr_br ->> {}

   <method_parameters> -> <method_parameter_list> rr_br ->> {}
   <method_parameters> -> rr_br ->> {}

   <method_parameter_list> -> <method_parameter_list> comma <method_parameter> ->> {}
   <method_parameter_list> -> <method_parameter> ->> {}
   
   <method_parameter> -> id ->> {}
   <method_parameter> -> at id ->> {}

   <method_body> -> semicolon ->> {}
   <method_body> -> <method_body_begin> rc_br ->> {}
   <method_body> -> <method_body_begin> <command_list> rc_br ->> {}

   <method_body_begin> -> lc_br ->> {}

   $ -- command list --
   <command_list> -> <command_list> <command> ->> {}
   <command_list> -> <command> ->> {}

   $ -- command block --
   <command> -> <command_block> ->> {}

   <command_block> -> lc_br rc_br ->> {}
   <command_block> -> <command_block_begin> <command_list> rc_br ->> {}
   <command_block_begin> -> lc_br ->> {}

   $ - try catch statement -
   <command> -> <try_catch_block> ->> {}

   <try_catch_block> -> <try_begin> <command_block> <catch_begin> <command_block> ->> {}
   <try_begin> -> try ->> {}
   <catch_begin> -> catch lr_br id rr_br ->> {}

   $ -- if, if-else statement --
   <command> -> if <condition> <if_else> ->> {}
   <if_else> -> <command> ->> {}
   <if_else> -> <command> else <command> ->> {}

   $ -- while statement --
   <command> -> <while_begin> <condition> <command> ->> {}
   <while_begin> -> while ->> {}

   $ -- do-while statement --
   <command> -> <do_while_begin> <command> while <condition> semicolon ->> {}
   <do_while_begin> -> do ->> {}

   $ -- for statement --
   <command> -> <for_begin> lr_br <for_expression> rr_br <command> ->> {}
   <for_expression> -> <for_identifier> sequence <exp> ->> {}
   <for_identifier> -> id ->> {}
   <for_begin> -> for ->> {}

   $ -- switch statement --
   <command> -> switch lr_br <switch_expression> rr_br <switch_item_list> rc_br ->> {}

   <switch_expression> -> <exp> ->> {}

   <switch_item_list> -> <switch_item_list> <switch_item> ->> {}

   <switch_item_list> -> lc_br ->> {}

   <switch_item> -> <switch_item_begin> <command> ->> {}

   <switch_item_begin> -> case <case_exp_list> colon ->> {}

   <switch_item_begin> -> default colon ->> {}

   <case_exp_list> -> <case_exp_list> comma <exp> ->> {}
   <case_exp_list> -> <exp> ->> {}

   $ -- break statement --
   <command> -> break semicolon ->> {}

   $ -- continue statement --
   <command> -> continue semicolon ->> {}

   $ -- return statement --
   <command> -> return <expression> semicolon ->> {}

   $ -- command exp --
   <command> -> <expression> semicolon ->> {}

   $ -- init exp --
   <A> -> <array_elements> re_br ->> {}
   
   $ -- array --
   <array_elements> -> <array_elements_begin> ->> {}
   <array_elements> -> <array_elements_begin> <array_element_list> ->> {}

   <array_elements_begin> -> le_br ->> {}

   <array_element_list> -> <array_element_list> comma <exp> ->> {}
   <array_element_list> -> <exp> ->> {}

   $ -- condition --
   <condition> -> lr_br <exp> rr_br ->> {}

   $ -- expression --
   <expression> -> <exp> ->> {}

   $ -- exp --
   <exp> -> <H> ->> {}

   $ -- exp operators --
   <H> -> <H> equal <H> ->> {}
   <H> -> <H> plus_equal <H> ->> {}
   <H> -> <H> minus_equal <H> ->> {}
   <H> -> <H> asterisk_equal <H> ->> {}
   <H> -> <H> slash_equal <H> ->> {}
   <H> -> <H> percent_equal <H> ->> {}
   <H> -> <H> double_ls_br_equal <H> ->> {}
   <H> -> <H> double_rs_br_equal <H> ->> {}
   <H> -> <H> ampersand_equal <H> ->> {}
   <H> -> <H> pipe_equal <H> ->> {}
   <H> -> <H> circumflex_equal <H> ->> {}
   <H> -> <G> ->> {}

   <G> -> <G> double_ampersand <F> ->> {}
   <G> -> <G> double_pipe <F> ->> {}
   <G> -> <F> ->> {}

   <F> -> <F> double_equal <E> ->> {}
   <F> -> <F> exclamation_equal <E> ->> {}
   <F> -> <F> rs_br <E> ->> {}
   <F> -> <F> ls_br <E> ->> {}
   <F> -> <F> rs_br_equal <E> ->> {}
   <F> -> <F> ls_br_equal <E> ->> {}
   <F> -> <E> ->> {}

   <E> -> <E> ampersand <D> ->> {}
   <E> -> <E> pipe <D> ->> {}
   <E> -> <E> circumflex <D> ->> {}
   <E> -> <D> ->> {}

   <D> -> <D> double_rs_br <C> ->> {}
   <D> -> <D> double_ls_br <C> ->> {}
   <D> -> <C> ->> {}

   <C> -> <C> plus <B> ->> {}
   <C> -> <C> minus <B> ->> {}
   <C> -> <B> ->> {}

   <B> -> <B> asterisk <A> ->> {}
   <B> -> <B> slash <A> ->> {}
   <B> -> <B> percent <A> ->> {}

   <B> -> <A> ->> {}
   <A> -> <A> double_plus ->> {}
   <A> -> <A> double_minus ->> {}
   <A> -> double_plus <A> ->> {}
   <A> -> double_minus <A> ->> {}
   <A> -> plus <A> ->> {}
   <A> -> minus <A> ->> {}
   <A> -> exclamation <A> ->> {}
   <A> -> tilde <A> ->> {}

   <A> -> <A> le_br <item_range> re_br ->> {}

   <item_range> -> <H> ->> {}

   $ -- slice rules --
   <item_range> -> <slice_range> ->> {}

   <slice_range> -> <exp_colon_exp_colon> ->> {}

   <slice_range> -> <exp_colon_exp_colon> <H> ->> {}

   <exp_colon_exp_colon> -> <exp_colon> <exp_colon> ->> {}

   <exp_colon> -> <H> colon ->> {}

   <exp_colon> -> colon ->> {}

   $ -- exp bracket --
   <A> -> lr_br <H> rr_br ->>  {}

   $ -- identifier --
   <A> -> id ->>  {}

   $ -- this access --
   <A> -> this ->>  {}

   $ -- new object creation --
   <A> -> <object_class_name> <parameters> rr_br ->>  {}
   <A> -> <object_class_name> le_br <exp> re_br ->>  {}

   $ -- object class name --
   <object_class_name> -> new id ->>  {}

   $ -- free existing object --
   <A> -> free <exp> ->> {}

   $ -- type identification --
   <A> -> type <A> ->>  {}

   $ -- object reference copy --
   <A> -> <A> equal_at <H> ->>  {}

   $ -- conditional expression --
   <H> -> <H> question <exp> colon <exp> ->> {}

   $ -- object member --
   <A> -> <object_member> ->>  {}

   $ -- method call --
   <A> -> id <parameters> rr_br ->>  {}
   <A> -> <object_member> <parameters> rr_br ->>  {}
   
   <parameters> -> <parameters_begin> ->>  {}
   <parameters> -> <parameters_begin> <parameter_list> ->>  {}

   <parameters_begin> -> lr_br ->>  {}

   <parameter_list> -> <parameter_list> comma <exp> ->>  {}
   <parameter_list> -> <exp> ->>  {}

   $ -- object member --
   <object_member> -> <A> dot id ->>  {}

   $ -- constant values --
   <A> -> single_char_const ->>  {}
   <A> -> octal_char_const ->>  {}
   <A> -> hex_char_const ->>  {}
   <A> -> backslash_char_const ->>  {}

   <A> -> oct_int_const ->>  {}
   <A> -> dec_int_const ->>  {}
   <A> -> hex_int_const ->>  {}

   <A> -> float_const ->>  {}

   <A> -> string_const ->>  {}

